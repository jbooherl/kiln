// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"io"
	"sync"

	"github.com/pivotal-cf/kiln/internal/commands"
	"github.com/pivotal-cf/kiln/pkg/release"
)

type ReleaseCacheBucket struct {
	FindReleaseVersionStub        func(release.Requirement) (release.Remote, bool, error)
	findReleaseVersionMutex       sync.RWMutex
	findReleaseVersionArgsForCall []struct {
		arg1 release.Requirement
	}
	findReleaseVersionReturns struct {
		result1 release.Remote
		result2 bool
		result3 error
	}
	findReleaseVersionReturnsOnCall map[int]struct {
		result1 release.Remote
		result2 bool
		result3 error
	}
	UploadReleaseStub        func(release.Requirement, io.Reader) (release.Remote, error)
	uploadReleaseMutex       sync.RWMutex
	uploadReleaseArgsForCall []struct {
		arg1 release.Requirement
		arg2 io.Reader
	}
	uploadReleaseReturns struct {
		result1 release.Remote
		result2 error
	}
	uploadReleaseReturnsOnCall map[int]struct {
		result1 release.Remote
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ReleaseCacheBucket) FindReleaseVersion(arg1 release.Requirement) (release.Remote, bool, error) {
	fake.findReleaseVersionMutex.Lock()
	ret, specificReturn := fake.findReleaseVersionReturnsOnCall[len(fake.findReleaseVersionArgsForCall)]
	fake.findReleaseVersionArgsForCall = append(fake.findReleaseVersionArgsForCall, struct {
		arg1 release.Requirement
	}{arg1})
	stub := fake.FindReleaseVersionStub
	fakeReturns := fake.findReleaseVersionReturns
	fake.recordInvocation("FindReleaseVersion", []interface{}{arg1})
	fake.findReleaseVersionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *ReleaseCacheBucket) FindReleaseVersionCallCount() int {
	fake.findReleaseVersionMutex.RLock()
	defer fake.findReleaseVersionMutex.RUnlock()
	return len(fake.findReleaseVersionArgsForCall)
}

func (fake *ReleaseCacheBucket) FindReleaseVersionCalls(stub func(release.Requirement) (release.Remote, bool, error)) {
	fake.findReleaseVersionMutex.Lock()
	defer fake.findReleaseVersionMutex.Unlock()
	fake.FindReleaseVersionStub = stub
}

func (fake *ReleaseCacheBucket) FindReleaseVersionArgsForCall(i int) release.Requirement {
	fake.findReleaseVersionMutex.RLock()
	defer fake.findReleaseVersionMutex.RUnlock()
	argsForCall := fake.findReleaseVersionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ReleaseCacheBucket) FindReleaseVersionReturns(result1 release.Remote, result2 bool, result3 error) {
	fake.findReleaseVersionMutex.Lock()
	defer fake.findReleaseVersionMutex.Unlock()
	fake.FindReleaseVersionStub = nil
	fake.findReleaseVersionReturns = struct {
		result1 release.Remote
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *ReleaseCacheBucket) FindReleaseVersionReturnsOnCall(i int, result1 release.Remote, result2 bool, result3 error) {
	fake.findReleaseVersionMutex.Lock()
	defer fake.findReleaseVersionMutex.Unlock()
	fake.FindReleaseVersionStub = nil
	if fake.findReleaseVersionReturnsOnCall == nil {
		fake.findReleaseVersionReturnsOnCall = make(map[int]struct {
			result1 release.Remote
			result2 bool
			result3 error
		})
	}
	fake.findReleaseVersionReturnsOnCall[i] = struct {
		result1 release.Remote
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *ReleaseCacheBucket) UploadRelease(arg1 release.Requirement, arg2 io.Reader) (release.Remote, error) {
	fake.uploadReleaseMutex.Lock()
	ret, specificReturn := fake.uploadReleaseReturnsOnCall[len(fake.uploadReleaseArgsForCall)]
	fake.uploadReleaseArgsForCall = append(fake.uploadReleaseArgsForCall, struct {
		arg1 release.Requirement
		arg2 io.Reader
	}{arg1, arg2})
	stub := fake.UploadReleaseStub
	fakeReturns := fake.uploadReleaseReturns
	fake.recordInvocation("UploadRelease", []interface{}{arg1, arg2})
	fake.uploadReleaseMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ReleaseCacheBucket) UploadReleaseCallCount() int {
	fake.uploadReleaseMutex.RLock()
	defer fake.uploadReleaseMutex.RUnlock()
	return len(fake.uploadReleaseArgsForCall)
}

func (fake *ReleaseCacheBucket) UploadReleaseCalls(stub func(release.Requirement, io.Reader) (release.Remote, error)) {
	fake.uploadReleaseMutex.Lock()
	defer fake.uploadReleaseMutex.Unlock()
	fake.UploadReleaseStub = stub
}

func (fake *ReleaseCacheBucket) UploadReleaseArgsForCall(i int) (release.Requirement, io.Reader) {
	fake.uploadReleaseMutex.RLock()
	defer fake.uploadReleaseMutex.RUnlock()
	argsForCall := fake.uploadReleaseArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ReleaseCacheBucket) UploadReleaseReturns(result1 release.Remote, result2 error) {
	fake.uploadReleaseMutex.Lock()
	defer fake.uploadReleaseMutex.Unlock()
	fake.UploadReleaseStub = nil
	fake.uploadReleaseReturns = struct {
		result1 release.Remote
		result2 error
	}{result1, result2}
}

func (fake *ReleaseCacheBucket) UploadReleaseReturnsOnCall(i int, result1 release.Remote, result2 error) {
	fake.uploadReleaseMutex.Lock()
	defer fake.uploadReleaseMutex.Unlock()
	fake.UploadReleaseStub = nil
	if fake.uploadReleaseReturnsOnCall == nil {
		fake.uploadReleaseReturnsOnCall = make(map[int]struct {
			result1 release.Remote
			result2 error
		})
	}
	fake.uploadReleaseReturnsOnCall[i] = struct {
		result1 release.Remote
		result2 error
	}{result1, result2}
}

func (fake *ReleaseCacheBucket) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findReleaseVersionMutex.RLock()
	defer fake.findReleaseVersionMutex.RUnlock()
	fake.uploadReleaseMutex.RLock()
	defer fake.uploadReleaseMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ReleaseCacheBucket) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commands.ReleaseCacheBucket = new(ReleaseCacheBucket)
