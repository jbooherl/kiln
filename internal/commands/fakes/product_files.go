// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"io"
	"sync"

	pivnet "github.com/pivotal-cf/go-pivnet/v2"
	"github.com/pivotal-cf/go-pivnet/v2/download"
)

type ProductFiles struct {
	DownloadForReleaseStub        func(*download.FileInfo, string, int, int, io.Writer) error
	downloadForReleaseMutex       sync.RWMutex
	downloadForReleaseArgsForCall []struct {
		arg1 *download.FileInfo
		arg2 string
		arg3 int
		arg4 int
		arg5 io.Writer
	}
	downloadForReleaseReturns struct {
		result1 error
	}
	downloadForReleaseReturnsOnCall map[int]struct {
		result1 error
	}
	ListForReleaseStub        func(string, int) ([]pivnet.ProductFile, error)
	listForReleaseMutex       sync.RWMutex
	listForReleaseArgsForCall []struct {
		arg1 string
		arg2 int
	}
	listForReleaseReturns struct {
		result1 []pivnet.ProductFile
		result2 error
	}
	listForReleaseReturnsOnCall map[int]struct {
		result1 []pivnet.ProductFile
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ProductFiles) DownloadForRelease(arg1 *download.FileInfo, arg2 string, arg3 int, arg4 int, arg5 io.Writer) error {
	fake.downloadForReleaseMutex.Lock()
	ret, specificReturn := fake.downloadForReleaseReturnsOnCall[len(fake.downloadForReleaseArgsForCall)]
	fake.downloadForReleaseArgsForCall = append(fake.downloadForReleaseArgsForCall, struct {
		arg1 *download.FileInfo
		arg2 string
		arg3 int
		arg4 int
		arg5 io.Writer
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.DownloadForReleaseStub
	fakeReturns := fake.downloadForReleaseReturns
	fake.recordInvocation("DownloadForRelease", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.downloadForReleaseMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ProductFiles) DownloadForReleaseCallCount() int {
	fake.downloadForReleaseMutex.RLock()
	defer fake.downloadForReleaseMutex.RUnlock()
	return len(fake.downloadForReleaseArgsForCall)
}

func (fake *ProductFiles) DownloadForReleaseCalls(stub func(*download.FileInfo, string, int, int, io.Writer) error) {
	fake.downloadForReleaseMutex.Lock()
	defer fake.downloadForReleaseMutex.Unlock()
	fake.DownloadForReleaseStub = stub
}

func (fake *ProductFiles) DownloadForReleaseArgsForCall(i int) (*download.FileInfo, string, int, int, io.Writer) {
	fake.downloadForReleaseMutex.RLock()
	defer fake.downloadForReleaseMutex.RUnlock()
	argsForCall := fake.downloadForReleaseArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *ProductFiles) DownloadForReleaseReturns(result1 error) {
	fake.downloadForReleaseMutex.Lock()
	defer fake.downloadForReleaseMutex.Unlock()
	fake.DownloadForReleaseStub = nil
	fake.downloadForReleaseReturns = struct {
		result1 error
	}{result1}
}

func (fake *ProductFiles) DownloadForReleaseReturnsOnCall(i int, result1 error) {
	fake.downloadForReleaseMutex.Lock()
	defer fake.downloadForReleaseMutex.Unlock()
	fake.DownloadForReleaseStub = nil
	if fake.downloadForReleaseReturnsOnCall == nil {
		fake.downloadForReleaseReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.downloadForReleaseReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ProductFiles) ListForRelease(arg1 string, arg2 int) ([]pivnet.ProductFile, error) {
	fake.listForReleaseMutex.Lock()
	ret, specificReturn := fake.listForReleaseReturnsOnCall[len(fake.listForReleaseArgsForCall)]
	fake.listForReleaseArgsForCall = append(fake.listForReleaseArgsForCall, struct {
		arg1 string
		arg2 int
	}{arg1, arg2})
	stub := fake.ListForReleaseStub
	fakeReturns := fake.listForReleaseReturns
	fake.recordInvocation("ListForRelease", []interface{}{arg1, arg2})
	fake.listForReleaseMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ProductFiles) ListForReleaseCallCount() int {
	fake.listForReleaseMutex.RLock()
	defer fake.listForReleaseMutex.RUnlock()
	return len(fake.listForReleaseArgsForCall)
}

func (fake *ProductFiles) ListForReleaseCalls(stub func(string, int) ([]pivnet.ProductFile, error)) {
	fake.listForReleaseMutex.Lock()
	defer fake.listForReleaseMutex.Unlock()
	fake.ListForReleaseStub = stub
}

func (fake *ProductFiles) ListForReleaseArgsForCall(i int) (string, int) {
	fake.listForReleaseMutex.RLock()
	defer fake.listForReleaseMutex.RUnlock()
	argsForCall := fake.listForReleaseArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ProductFiles) ListForReleaseReturns(result1 []pivnet.ProductFile, result2 error) {
	fake.listForReleaseMutex.Lock()
	defer fake.listForReleaseMutex.Unlock()
	fake.ListForReleaseStub = nil
	fake.listForReleaseReturns = struct {
		result1 []pivnet.ProductFile
		result2 error
	}{result1, result2}
}

func (fake *ProductFiles) ListForReleaseReturnsOnCall(i int, result1 []pivnet.ProductFile, result2 error) {
	fake.listForReleaseMutex.Lock()
	defer fake.listForReleaseMutex.Unlock()
	fake.ListForReleaseStub = nil
	if fake.listForReleaseReturnsOnCall == nil {
		fake.listForReleaseReturnsOnCall = make(map[int]struct {
			result1 []pivnet.ProductFile
			result2 error
		})
	}
	fake.listForReleaseReturnsOnCall[i] = struct {
		result1 []pivnet.ProductFile
		result2 error
	}{result1, result2}
}

func (fake *ProductFiles) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.downloadForReleaseMutex.RLock()
	defer fake.downloadForReleaseMutex.RUnlock()
	fake.listForReleaseMutex.RLock()
	defer fake.listForReleaseMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ProductFiles) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
