// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/kiln/internal/component"
	"github.com/pivotal-cf/kiln/pkg/cargo"
)

type ReleaseDownloader struct {
	DownloadReleaseStub        func(string, cargo.ComponentLock) (component.Local, error)
	downloadReleaseMutex       sync.RWMutex
	downloadReleaseArgsForCall []struct {
		arg1 string
		arg2 cargo.ComponentLock
	}
	downloadReleaseReturns struct {
		result1 component.Local
		result2 error
	}
	downloadReleaseReturnsOnCall map[int]struct {
		result1 component.Local
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ReleaseDownloader) DownloadRelease(arg1 string, arg2 cargo.ComponentLock) (component.Local, error) {
	fake.downloadReleaseMutex.Lock()
	ret, specificReturn := fake.downloadReleaseReturnsOnCall[len(fake.downloadReleaseArgsForCall)]
	fake.downloadReleaseArgsForCall = append(fake.downloadReleaseArgsForCall, struct {
		arg1 string
		arg2 cargo.ComponentLock
	}{arg1, arg2})
	stub := fake.DownloadReleaseStub
	fakeReturns := fake.downloadReleaseReturns
	fake.recordInvocation("DownloadRelease", []interface{}{arg1, arg2})
	fake.downloadReleaseMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ReleaseDownloader) DownloadReleaseCallCount() int {
	fake.downloadReleaseMutex.RLock()
	defer fake.downloadReleaseMutex.RUnlock()
	return len(fake.downloadReleaseArgsForCall)
}

func (fake *ReleaseDownloader) DownloadReleaseCalls(stub func(string, cargo.ComponentLock) (component.Local, error)) {
	fake.downloadReleaseMutex.Lock()
	defer fake.downloadReleaseMutex.Unlock()
	fake.DownloadReleaseStub = stub
}

func (fake *ReleaseDownloader) DownloadReleaseArgsForCall(i int) (string, cargo.ComponentLock) {
	fake.downloadReleaseMutex.RLock()
	defer fake.downloadReleaseMutex.RUnlock()
	argsForCall := fake.downloadReleaseArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ReleaseDownloader) DownloadReleaseReturns(result1 component.Local, result2 error) {
	fake.downloadReleaseMutex.Lock()
	defer fake.downloadReleaseMutex.Unlock()
	fake.DownloadReleaseStub = nil
	fake.downloadReleaseReturns = struct {
		result1 component.Local
		result2 error
	}{result1, result2}
}

func (fake *ReleaseDownloader) DownloadReleaseReturnsOnCall(i int, result1 component.Local, result2 error) {
	fake.downloadReleaseMutex.Lock()
	defer fake.downloadReleaseMutex.Unlock()
	fake.DownloadReleaseStub = nil
	if fake.downloadReleaseReturnsOnCall == nil {
		fake.downloadReleaseReturnsOnCall = make(map[int]struct {
			result1 component.Local
			result2 error
		})
	}
	fake.downloadReleaseReturnsOnCall[i] = struct {
		result1 component.Local
		result2 error
	}{result1, result2}
}

func (fake *ReleaseDownloader) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.downloadReleaseMutex.RLock()
	defer fake.downloadReleaseMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ReleaseDownloader) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ component.ReleaseDownloader = new(ReleaseDownloader)
