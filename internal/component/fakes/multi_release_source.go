// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/kiln/internal/component"
)

type MultiReleaseSource struct {
	FindByIDStub        func(string) (component.ReleaseSource, error)
	findByIDMutex       sync.RWMutex
	findByIDArgsForCall []struct {
		arg1 string
	}
	findByIDReturns struct {
		result1 component.ReleaseSource
		result2 error
	}
	findByIDReturnsOnCall map[int]struct {
		result1 component.ReleaseSource
		result2 error
	}
	GetReleaseCacheStub        func() (component.ReleaseSource, error)
	getReleaseCacheMutex       sync.RWMutex
	getReleaseCacheArgsForCall []struct {
	}
	getReleaseCacheReturns struct {
		result1 component.ReleaseSource
		result2 error
	}
	getReleaseCacheReturnsOnCall map[int]struct {
		result1 component.ReleaseSource
		result2 error
	}
	SetDownloadThreadsStub        func(int)
	setDownloadThreadsMutex       sync.RWMutex
	setDownloadThreadsArgsForCall []struct {
		arg1 int
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *MultiReleaseSource) FindByID(arg1 string) (component.ReleaseSource, error) {
	fake.findByIDMutex.Lock()
	ret, specificReturn := fake.findByIDReturnsOnCall[len(fake.findByIDArgsForCall)]
	fake.findByIDArgsForCall = append(fake.findByIDArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.FindByIDStub
	fakeReturns := fake.findByIDReturns
	fake.recordInvocation("FindByID", []interface{}{arg1})
	fake.findByIDMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *MultiReleaseSource) FindByIDCallCount() int {
	fake.findByIDMutex.RLock()
	defer fake.findByIDMutex.RUnlock()
	return len(fake.findByIDArgsForCall)
}

func (fake *MultiReleaseSource) FindByIDCalls(stub func(string) (component.ReleaseSource, error)) {
	fake.findByIDMutex.Lock()
	defer fake.findByIDMutex.Unlock()
	fake.FindByIDStub = stub
}

func (fake *MultiReleaseSource) FindByIDArgsForCall(i int) string {
	fake.findByIDMutex.RLock()
	defer fake.findByIDMutex.RUnlock()
	argsForCall := fake.findByIDArgsForCall[i]
	return argsForCall.arg1
}

func (fake *MultiReleaseSource) FindByIDReturns(result1 component.ReleaseSource, result2 error) {
	fake.findByIDMutex.Lock()
	defer fake.findByIDMutex.Unlock()
	fake.FindByIDStub = nil
	fake.findByIDReturns = struct {
		result1 component.ReleaseSource
		result2 error
	}{result1, result2}
}

func (fake *MultiReleaseSource) FindByIDReturnsOnCall(i int, result1 component.ReleaseSource, result2 error) {
	fake.findByIDMutex.Lock()
	defer fake.findByIDMutex.Unlock()
	fake.FindByIDStub = nil
	if fake.findByIDReturnsOnCall == nil {
		fake.findByIDReturnsOnCall = make(map[int]struct {
			result1 component.ReleaseSource
			result2 error
		})
	}
	fake.findByIDReturnsOnCall[i] = struct {
		result1 component.ReleaseSource
		result2 error
	}{result1, result2}
}

func (fake *MultiReleaseSource) GetReleaseCache() (component.ReleaseSource, error) {
	fake.getReleaseCacheMutex.Lock()
	ret, specificReturn := fake.getReleaseCacheReturnsOnCall[len(fake.getReleaseCacheArgsForCall)]
	fake.getReleaseCacheArgsForCall = append(fake.getReleaseCacheArgsForCall, struct {
	}{})
	stub := fake.GetReleaseCacheStub
	fakeReturns := fake.getReleaseCacheReturns
	fake.recordInvocation("GetReleaseCache", []interface{}{})
	fake.getReleaseCacheMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *MultiReleaseSource) GetReleaseCacheCallCount() int {
	fake.getReleaseCacheMutex.RLock()
	defer fake.getReleaseCacheMutex.RUnlock()
	return len(fake.getReleaseCacheArgsForCall)
}

func (fake *MultiReleaseSource) GetReleaseCacheCalls(stub func() (component.ReleaseSource, error)) {
	fake.getReleaseCacheMutex.Lock()
	defer fake.getReleaseCacheMutex.Unlock()
	fake.GetReleaseCacheStub = stub
}

func (fake *MultiReleaseSource) GetReleaseCacheReturns(result1 component.ReleaseSource, result2 error) {
	fake.getReleaseCacheMutex.Lock()
	defer fake.getReleaseCacheMutex.Unlock()
	fake.GetReleaseCacheStub = nil
	fake.getReleaseCacheReturns = struct {
		result1 component.ReleaseSource
		result2 error
	}{result1, result2}
}

func (fake *MultiReleaseSource) GetReleaseCacheReturnsOnCall(i int, result1 component.ReleaseSource, result2 error) {
	fake.getReleaseCacheMutex.Lock()
	defer fake.getReleaseCacheMutex.Unlock()
	fake.GetReleaseCacheStub = nil
	if fake.getReleaseCacheReturnsOnCall == nil {
		fake.getReleaseCacheReturnsOnCall = make(map[int]struct {
			result1 component.ReleaseSource
			result2 error
		})
	}
	fake.getReleaseCacheReturnsOnCall[i] = struct {
		result1 component.ReleaseSource
		result2 error
	}{result1, result2}
}

func (fake *MultiReleaseSource) SetDownloadThreads(arg1 int) {
	fake.setDownloadThreadsMutex.Lock()
	fake.setDownloadThreadsArgsForCall = append(fake.setDownloadThreadsArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.SetDownloadThreadsStub
	fake.recordInvocation("SetDownloadThreads", []interface{}{arg1})
	fake.setDownloadThreadsMutex.Unlock()
	if stub != nil {
		fake.SetDownloadThreadsStub(arg1)
	}
}

func (fake *MultiReleaseSource) SetDownloadThreadsCallCount() int {
	fake.setDownloadThreadsMutex.RLock()
	defer fake.setDownloadThreadsMutex.RUnlock()
	return len(fake.setDownloadThreadsArgsForCall)
}

func (fake *MultiReleaseSource) SetDownloadThreadsCalls(stub func(int)) {
	fake.setDownloadThreadsMutex.Lock()
	defer fake.setDownloadThreadsMutex.Unlock()
	fake.SetDownloadThreadsStub = stub
}

func (fake *MultiReleaseSource) SetDownloadThreadsArgsForCall(i int) int {
	fake.setDownloadThreadsMutex.RLock()
	defer fake.setDownloadThreadsMutex.RUnlock()
	argsForCall := fake.setDownloadThreadsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *MultiReleaseSource) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findByIDMutex.RLock()
	defer fake.findByIDMutex.RUnlock()
	fake.getReleaseCacheMutex.RLock()
	defer fake.getReleaseCacheMutex.RUnlock()
	fake.setDownloadThreadsMutex.RLock()
	defer fake.setDownloadThreadsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *MultiReleaseSource) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ component.MultiReleaseSource = new(MultiReleaseSource)
