// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"io"
	"sync"

	"github.com/pivotal-cf/kiln/internal/component"
	"github.com/pivotal-cf/kiln/pkg/cargo"
)

type MultiReleaseSource struct {
	DownloadComponentStub        func(context.Context, io.Writer, cargo.ComponentLock) error
	downloadComponentMutex       sync.RWMutex
	downloadComponentArgsForCall []struct {
		arg1 context.Context
		arg2 io.Writer
		arg3 cargo.ComponentLock
	}
	downloadComponentReturns struct {
		result1 error
	}
	downloadComponentReturnsOnCall map[int]struct {
		result1 error
	}
	FindByIDStub        func(string) (component.ReleaseSource, error)
	findByIDMutex       sync.RWMutex
	findByIDArgsForCall []struct {
		arg1 string
	}
	findByIDReturns struct {
		result1 component.ReleaseSource
		result2 error
	}
	findByIDReturnsOnCall map[int]struct {
		result1 component.ReleaseSource
		result2 error
	}
	FindReleaseVersionStub        func(cargo.ComponentSpec) (cargo.ComponentLock, bool, error)
	findReleaseVersionMutex       sync.RWMutex
	findReleaseVersionArgsForCall []struct {
		arg1 cargo.ComponentSpec
	}
	findReleaseVersionReturns struct {
		result1 cargo.ComponentLock
		result2 bool
		result3 error
	}
	findReleaseVersionReturnsOnCall map[int]struct {
		result1 cargo.ComponentLock
		result2 bool
		result3 error
	}
	GetMatchedReleaseStub        func(cargo.ComponentSpec) (cargo.ComponentLock, bool, error)
	getMatchedReleaseMutex       sync.RWMutex
	getMatchedReleaseArgsForCall []struct {
		arg1 cargo.ComponentSpec
	}
	getMatchedReleaseReturns struct {
		result1 cargo.ComponentLock
		result2 bool
		result3 error
	}
	getMatchedReleaseReturnsOnCall map[int]struct {
		result1 cargo.ComponentLock
		result2 bool
		result3 error
	}
	SetDownloadThreadsStub        func(int)
	setDownloadThreadsMutex       sync.RWMutex
	setDownloadThreadsArgsForCall []struct {
		arg1 int
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *MultiReleaseSource) DownloadComponent(arg1 context.Context, arg2 io.Writer, arg3 cargo.ComponentLock) error {
	fake.downloadComponentMutex.Lock()
	ret, specificReturn := fake.downloadComponentReturnsOnCall[len(fake.downloadComponentArgsForCall)]
	fake.downloadComponentArgsForCall = append(fake.downloadComponentArgsForCall, struct {
		arg1 context.Context
		arg2 io.Writer
		arg3 cargo.ComponentLock
	}{arg1, arg2, arg3})
	stub := fake.DownloadComponentStub
	fakeReturns := fake.downloadComponentReturns
	fake.recordInvocation("DownloadComponent", []interface{}{arg1, arg2, arg3})
	fake.downloadComponentMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *MultiReleaseSource) DownloadComponentCallCount() int {
	fake.downloadComponentMutex.RLock()
	defer fake.downloadComponentMutex.RUnlock()
	return len(fake.downloadComponentArgsForCall)
}

func (fake *MultiReleaseSource) DownloadComponentCalls(stub func(context.Context, io.Writer, cargo.ComponentLock) error) {
	fake.downloadComponentMutex.Lock()
	defer fake.downloadComponentMutex.Unlock()
	fake.DownloadComponentStub = stub
}

func (fake *MultiReleaseSource) DownloadComponentArgsForCall(i int) (context.Context, io.Writer, cargo.ComponentLock) {
	fake.downloadComponentMutex.RLock()
	defer fake.downloadComponentMutex.RUnlock()
	argsForCall := fake.downloadComponentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *MultiReleaseSource) DownloadComponentReturns(result1 error) {
	fake.downloadComponentMutex.Lock()
	defer fake.downloadComponentMutex.Unlock()
	fake.DownloadComponentStub = nil
	fake.downloadComponentReturns = struct {
		result1 error
	}{result1}
}

func (fake *MultiReleaseSource) DownloadComponentReturnsOnCall(i int, result1 error) {
	fake.downloadComponentMutex.Lock()
	defer fake.downloadComponentMutex.Unlock()
	fake.DownloadComponentStub = nil
	if fake.downloadComponentReturnsOnCall == nil {
		fake.downloadComponentReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.downloadComponentReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *MultiReleaseSource) FindByID(arg1 string) (component.ReleaseSource, error) {
	fake.findByIDMutex.Lock()
	ret, specificReturn := fake.findByIDReturnsOnCall[len(fake.findByIDArgsForCall)]
	fake.findByIDArgsForCall = append(fake.findByIDArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.FindByIDStub
	fakeReturns := fake.findByIDReturns
	fake.recordInvocation("FindByID", []interface{}{arg1})
	fake.findByIDMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *MultiReleaseSource) FindByIDCallCount() int {
	fake.findByIDMutex.RLock()
	defer fake.findByIDMutex.RUnlock()
	return len(fake.findByIDArgsForCall)
}

func (fake *MultiReleaseSource) FindByIDCalls(stub func(string) (component.ReleaseSource, error)) {
	fake.findByIDMutex.Lock()
	defer fake.findByIDMutex.Unlock()
	fake.FindByIDStub = stub
}

func (fake *MultiReleaseSource) FindByIDArgsForCall(i int) string {
	fake.findByIDMutex.RLock()
	defer fake.findByIDMutex.RUnlock()
	argsForCall := fake.findByIDArgsForCall[i]
	return argsForCall.arg1
}

func (fake *MultiReleaseSource) FindByIDReturns(result1 component.ReleaseSource, result2 error) {
	fake.findByIDMutex.Lock()
	defer fake.findByIDMutex.Unlock()
	fake.FindByIDStub = nil
	fake.findByIDReturns = struct {
		result1 component.ReleaseSource
		result2 error
	}{result1, result2}
}

func (fake *MultiReleaseSource) FindByIDReturnsOnCall(i int, result1 component.ReleaseSource, result2 error) {
	fake.findByIDMutex.Lock()
	defer fake.findByIDMutex.Unlock()
	fake.FindByIDStub = nil
	if fake.findByIDReturnsOnCall == nil {
		fake.findByIDReturnsOnCall = make(map[int]struct {
			result1 component.ReleaseSource
			result2 error
		})
	}
	fake.findByIDReturnsOnCall[i] = struct {
		result1 component.ReleaseSource
		result2 error
	}{result1, result2}
}

func (fake *MultiReleaseSource) FindReleaseVersion(arg1 cargo.ComponentSpec) (cargo.ComponentLock, bool, error) {
	fake.findReleaseVersionMutex.Lock()
	ret, specificReturn := fake.findReleaseVersionReturnsOnCall[len(fake.findReleaseVersionArgsForCall)]
	fake.findReleaseVersionArgsForCall = append(fake.findReleaseVersionArgsForCall, struct {
		arg1 cargo.ComponentSpec
	}{arg1})
	stub := fake.FindReleaseVersionStub
	fakeReturns := fake.findReleaseVersionReturns
	fake.recordInvocation("FindReleaseVersion", []interface{}{arg1})
	fake.findReleaseVersionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *MultiReleaseSource) FindReleaseVersionCallCount() int {
	fake.findReleaseVersionMutex.RLock()
	defer fake.findReleaseVersionMutex.RUnlock()
	return len(fake.findReleaseVersionArgsForCall)
}

func (fake *MultiReleaseSource) FindReleaseVersionCalls(stub func(cargo.ComponentSpec) (cargo.ComponentLock, bool, error)) {
	fake.findReleaseVersionMutex.Lock()
	defer fake.findReleaseVersionMutex.Unlock()
	fake.FindReleaseVersionStub = stub
}

func (fake *MultiReleaseSource) FindReleaseVersionArgsForCall(i int) cargo.ComponentSpec {
	fake.findReleaseVersionMutex.RLock()
	defer fake.findReleaseVersionMutex.RUnlock()
	argsForCall := fake.findReleaseVersionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *MultiReleaseSource) FindReleaseVersionReturns(result1 cargo.ComponentLock, result2 bool, result3 error) {
	fake.findReleaseVersionMutex.Lock()
	defer fake.findReleaseVersionMutex.Unlock()
	fake.FindReleaseVersionStub = nil
	fake.findReleaseVersionReturns = struct {
		result1 cargo.ComponentLock
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *MultiReleaseSource) FindReleaseVersionReturnsOnCall(i int, result1 cargo.ComponentLock, result2 bool, result3 error) {
	fake.findReleaseVersionMutex.Lock()
	defer fake.findReleaseVersionMutex.Unlock()
	fake.FindReleaseVersionStub = nil
	if fake.findReleaseVersionReturnsOnCall == nil {
		fake.findReleaseVersionReturnsOnCall = make(map[int]struct {
			result1 cargo.ComponentLock
			result2 bool
			result3 error
		})
	}
	fake.findReleaseVersionReturnsOnCall[i] = struct {
		result1 cargo.ComponentLock
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *MultiReleaseSource) GetMatchedRelease(arg1 cargo.ComponentSpec) (cargo.ComponentLock, bool, error) {
	fake.getMatchedReleaseMutex.Lock()
	ret, specificReturn := fake.getMatchedReleaseReturnsOnCall[len(fake.getMatchedReleaseArgsForCall)]
	fake.getMatchedReleaseArgsForCall = append(fake.getMatchedReleaseArgsForCall, struct {
		arg1 cargo.ComponentSpec
	}{arg1})
	stub := fake.GetMatchedReleaseStub
	fakeReturns := fake.getMatchedReleaseReturns
	fake.recordInvocation("GetMatchedRelease", []interface{}{arg1})
	fake.getMatchedReleaseMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *MultiReleaseSource) GetMatchedReleaseCallCount() int {
	fake.getMatchedReleaseMutex.RLock()
	defer fake.getMatchedReleaseMutex.RUnlock()
	return len(fake.getMatchedReleaseArgsForCall)
}

func (fake *MultiReleaseSource) GetMatchedReleaseCalls(stub func(cargo.ComponentSpec) (cargo.ComponentLock, bool, error)) {
	fake.getMatchedReleaseMutex.Lock()
	defer fake.getMatchedReleaseMutex.Unlock()
	fake.GetMatchedReleaseStub = stub
}

func (fake *MultiReleaseSource) GetMatchedReleaseArgsForCall(i int) cargo.ComponentSpec {
	fake.getMatchedReleaseMutex.RLock()
	defer fake.getMatchedReleaseMutex.RUnlock()
	argsForCall := fake.getMatchedReleaseArgsForCall[i]
	return argsForCall.arg1
}

func (fake *MultiReleaseSource) GetMatchedReleaseReturns(result1 cargo.ComponentLock, result2 bool, result3 error) {
	fake.getMatchedReleaseMutex.Lock()
	defer fake.getMatchedReleaseMutex.Unlock()
	fake.GetMatchedReleaseStub = nil
	fake.getMatchedReleaseReturns = struct {
		result1 cargo.ComponentLock
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *MultiReleaseSource) GetMatchedReleaseReturnsOnCall(i int, result1 cargo.ComponentLock, result2 bool, result3 error) {
	fake.getMatchedReleaseMutex.Lock()
	defer fake.getMatchedReleaseMutex.Unlock()
	fake.GetMatchedReleaseStub = nil
	if fake.getMatchedReleaseReturnsOnCall == nil {
		fake.getMatchedReleaseReturnsOnCall = make(map[int]struct {
			result1 cargo.ComponentLock
			result2 bool
			result3 error
		})
	}
	fake.getMatchedReleaseReturnsOnCall[i] = struct {
		result1 cargo.ComponentLock
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *MultiReleaseSource) SetDownloadThreads(arg1 int) {
	fake.setDownloadThreadsMutex.Lock()
	fake.setDownloadThreadsArgsForCall = append(fake.setDownloadThreadsArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.SetDownloadThreadsStub
	fake.recordInvocation("SetDownloadThreads", []interface{}{arg1})
	fake.setDownloadThreadsMutex.Unlock()
	if stub != nil {
		fake.SetDownloadThreadsStub(arg1)
	}
}

func (fake *MultiReleaseSource) SetDownloadThreadsCallCount() int {
	fake.setDownloadThreadsMutex.RLock()
	defer fake.setDownloadThreadsMutex.RUnlock()
	return len(fake.setDownloadThreadsArgsForCall)
}

func (fake *MultiReleaseSource) SetDownloadThreadsCalls(stub func(int)) {
	fake.setDownloadThreadsMutex.Lock()
	defer fake.setDownloadThreadsMutex.Unlock()
	fake.SetDownloadThreadsStub = stub
}

func (fake *MultiReleaseSource) SetDownloadThreadsArgsForCall(i int) int {
	fake.setDownloadThreadsMutex.RLock()
	defer fake.setDownloadThreadsMutex.RUnlock()
	argsForCall := fake.setDownloadThreadsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *MultiReleaseSource) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.downloadComponentMutex.RLock()
	defer fake.downloadComponentMutex.RUnlock()
	fake.findByIDMutex.RLock()
	defer fake.findByIDMutex.RUnlock()
	fake.findReleaseVersionMutex.RLock()
	defer fake.findReleaseVersionMutex.RUnlock()
	fake.getMatchedReleaseMutex.RLock()
	defer fake.getMatchedReleaseMutex.RUnlock()
	fake.setDownloadThreadsMutex.RLock()
	defer fake.setDownloadThreadsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *MultiReleaseSource) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ component.MultiReleaseSource = new(MultiReleaseSource)
