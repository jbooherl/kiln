// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"io"
	"sync"

	"github.com/aws/aws-sdk-go/service/s3"
	"github.com/aws/aws-sdk-go/service/s3/s3manager"
	"github.com/pivotal-cf/kiln/internal/component"
)

type S3Downloader struct {
	DownloadWithContextStub        func(context.Context, io.WriterAt, *s3.GetObjectInput, ...func(*s3manager.Downloader)) (int64, error)
	downloadWithContextMutex       sync.RWMutex
	downloadWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 io.WriterAt
		arg3 *s3.GetObjectInput
		arg4 []func(*s3manager.Downloader)
	}
	downloadWithContextReturns struct {
		result1 int64
		result2 error
	}
	downloadWithContextReturnsOnCall map[int]struct {
		result1 int64
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *S3Downloader) DownloadWithContext(arg1 context.Context, arg2 io.WriterAt, arg3 *s3.GetObjectInput, arg4 ...func(*s3manager.Downloader)) (int64, error) {
	fake.downloadWithContextMutex.Lock()
	ret, specificReturn := fake.downloadWithContextReturnsOnCall[len(fake.downloadWithContextArgsForCall)]
	fake.downloadWithContextArgsForCall = append(fake.downloadWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 io.WriterAt
		arg3 *s3.GetObjectInput
		arg4 []func(*s3manager.Downloader)
	}{arg1, arg2, arg3, arg4})
	stub := fake.DownloadWithContextStub
	fakeReturns := fake.downloadWithContextReturns
	fake.recordInvocation("DownloadWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.downloadWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *S3Downloader) DownloadWithContextCallCount() int {
	fake.downloadWithContextMutex.RLock()
	defer fake.downloadWithContextMutex.RUnlock()
	return len(fake.downloadWithContextArgsForCall)
}

func (fake *S3Downloader) DownloadWithContextCalls(stub func(context.Context, io.WriterAt, *s3.GetObjectInput, ...func(*s3manager.Downloader)) (int64, error)) {
	fake.downloadWithContextMutex.Lock()
	defer fake.downloadWithContextMutex.Unlock()
	fake.DownloadWithContextStub = stub
}

func (fake *S3Downloader) DownloadWithContextArgsForCall(i int) (context.Context, io.WriterAt, *s3.GetObjectInput, []func(*s3manager.Downloader)) {
	fake.downloadWithContextMutex.RLock()
	defer fake.downloadWithContextMutex.RUnlock()
	argsForCall := fake.downloadWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *S3Downloader) DownloadWithContextReturns(result1 int64, result2 error) {
	fake.downloadWithContextMutex.Lock()
	defer fake.downloadWithContextMutex.Unlock()
	fake.DownloadWithContextStub = nil
	fake.downloadWithContextReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *S3Downloader) DownloadWithContextReturnsOnCall(i int, result1 int64, result2 error) {
	fake.downloadWithContextMutex.Lock()
	defer fake.downloadWithContextMutex.Unlock()
	fake.DownloadWithContextStub = nil
	if fake.downloadWithContextReturnsOnCall == nil {
		fake.downloadWithContextReturnsOnCall = make(map[int]struct {
			result1 int64
			result2 error
		})
	}
	fake.downloadWithContextReturnsOnCall[i] = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *S3Downloader) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.downloadWithContextMutex.RLock()
	defer fake.downloadWithContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *S3Downloader) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ component.S3Downloader = new(S3Downloader)
