// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/kiln/internal/builder"
)

type PreProcessDirectoryReader struct {
	ReadPreProcessStub        func(string, map[string]interface{}) ([]builder.Part, error)
	readPreProcessMutex       sync.RWMutex
	readPreProcessArgsForCall []struct {
		arg1 string
		arg2 map[string]interface{}
	}
	readPreProcessReturns struct {
		result1 []builder.Part
		result2 error
	}
	readPreProcessReturnsOnCall map[int]struct {
		result1 []builder.Part
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *PreProcessDirectoryReader) ReadPreProcess(arg1 string, arg2 map[string]interface{}) ([]builder.Part, error) {
	fake.readPreProcessMutex.Lock()
	ret, specificReturn := fake.readPreProcessReturnsOnCall[len(fake.readPreProcessArgsForCall)]
	fake.readPreProcessArgsForCall = append(fake.readPreProcessArgsForCall, struct {
		arg1 string
		arg2 map[string]interface{}
	}{arg1, arg2})
	stub := fake.ReadPreProcessStub
	fakeReturns := fake.readPreProcessReturns
	fake.recordInvocation("ReadPreProcess", []interface{}{arg1, arg2})
	fake.readPreProcessMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *PreProcessDirectoryReader) ReadPreProcessCallCount() int {
	fake.readPreProcessMutex.RLock()
	defer fake.readPreProcessMutex.RUnlock()
	return len(fake.readPreProcessArgsForCall)
}

func (fake *PreProcessDirectoryReader) ReadPreProcessCalls(stub func(string, map[string]interface{}) ([]builder.Part, error)) {
	fake.readPreProcessMutex.Lock()
	defer fake.readPreProcessMutex.Unlock()
	fake.ReadPreProcessStub = stub
}

func (fake *PreProcessDirectoryReader) ReadPreProcessArgsForCall(i int) (string, map[string]interface{}) {
	fake.readPreProcessMutex.RLock()
	defer fake.readPreProcessMutex.RUnlock()
	argsForCall := fake.readPreProcessArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *PreProcessDirectoryReader) ReadPreProcessReturns(result1 []builder.Part, result2 error) {
	fake.readPreProcessMutex.Lock()
	defer fake.readPreProcessMutex.Unlock()
	fake.ReadPreProcessStub = nil
	fake.readPreProcessReturns = struct {
		result1 []builder.Part
		result2 error
	}{result1, result2}
}

func (fake *PreProcessDirectoryReader) ReadPreProcessReturnsOnCall(i int, result1 []builder.Part, result2 error) {
	fake.readPreProcessMutex.Lock()
	defer fake.readPreProcessMutex.Unlock()
	fake.ReadPreProcessStub = nil
	if fake.readPreProcessReturnsOnCall == nil {
		fake.readPreProcessReturnsOnCall = make(map[int]struct {
			result1 []builder.Part
			result2 error
		})
	}
	fake.readPreProcessReturnsOnCall[i] = struct {
		result1 []builder.Part
		result2 error
	}{result1, result2}
}

func (fake *PreProcessDirectoryReader) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.readPreProcessMutex.RLock()
	defer fake.readPreProcessMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *PreProcessDirectoryReader) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
